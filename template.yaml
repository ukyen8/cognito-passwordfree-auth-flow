AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template for user authentication flow

Globals:
  Function:
    Timeout: 3

Parameters:
  UserPoolName:
    Type: String
    Description: "The name of the User Pool to be created with"
    Default: "passwordless-user-auth"
  AccountTableName:
    Type: String
    Default: "AccountManagementTable"

Resources:
  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions.define_auth_challenge.lambda_handler.handler
      Runtime: python3.10

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions.create_auth_challenge.lambda_handler.handler
      Runtime: python3.10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions.verify_auth_challenge_response.lambda_handler.handler
      Runtime: python3.10

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions.pre_sign_up.lambda_handler.handler
      Runtime: python3.10

  PostAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions.post_authentication.lambda_handler.handler
      Runtime: python3.10
      Role: !GetAtt PostAuthenticationRole.Arn

  PostAuthenticationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  UserAttributesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allow-set-user-attributes
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource:
              - !GetAtt UserPool.Arn
      Roles:
        - !Ref PostAuthenticationRole

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
        PostAuthentication: !GetAtt PostAuthentication.Arn
        PreSignUp: !GetAtt PreSignUp.Arn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: auth-code-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY

  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthentication.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  AccountManagement:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions.account.lambda_handler.handler
      Runtime: python3.10
      Role: !GetAtt AccountManagementRole.Arn
      Environment:
        Variables:
          REGION_NAME: !Ref AWS::Region
          ACCOUNT_TABLE_NAME: !Ref AccountTableName
          APP_CLIENT_ID: !Ref UserPoolClient
      Events:
        CreateAccount:
          Type: Api
          Properties:
            Path: /accounts
            Method: POST
            RestApiId:
              Ref: AccountManagementApiGateway
        GetAccount:
          Type: Api
          Properties:
            Path: /accounts/{account_id}
            Method: GET
            RestApiId:
              Ref: AccountManagementApiGateway
        PatchAccount:
          Type: Api
          Properties:
            Path: /accounts
            Method: PATCH
            RestApiId:
              Ref: AccountManagementApiGateway

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref AccountTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: account_id
          KeyType: HASH

  AccountManagementApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: live
      OpenApiVersion: 3.0.1
      Name: AccountManagementApi
      Auth:
        ApiKeyRequired: TRUE
        UsagePlan:
          CreateUsagePlan: PER_API

  AccountManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Update*
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt AccountTable.Arn

Outputs:
  UserPoolId:
    Description: ID of the User Pool
    Value: !Ref UserPool
  UserPoolClientId:
    Description: ID of the User Pool Client
    Value: !Ref UserPoolClient
